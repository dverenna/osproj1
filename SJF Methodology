 SJF Meothodology:
  Scenarios 1-3:
    Process:            Arrival Time:               Service Time:             Memory Requirements:      Priority:
       P1                     0                          8                           4GB                  3
       P2                     0                          4                           2GB                  1
       P3                     0                          9                           5GB                  4
       P4                     0                          5                           3GB                  2
       
       As an example of how the shortest remaining time scheduling algorithm works for scenarios 1-3 please look at the above
       table. The table shows 4 processes that need to be executed by a single processor. For scenarios 1-3, the processes all arrive
       at a time of 0.
       
       Scenario 1:
         Each processor has the same speed and memory capacity, so we would not set priority to the higher memory requirements.
         The first process to be scheduled would be P2, and it would run until completion.
         The second process to be scheduled would be P4, and it would also run until completion.
         The third process to be scheduled would be P1, and it would run until completion.
         The fourth process to be scheduled would be P3, and it would run until completion.
         
       Scenario 2:
          Each processor has the same speed.
          P1 and P2 processors have a memory capacity of 2GB.
          P3 processor has a memory capacity of 4GB.
          P4 processor has a memory capacity of 8GB.
          
          We would set priority to the process with the smallest memory requirement, which would allow P2 and P4 to be scheduled
          before the other two processes with higher memory requirements, this would allow the shortest burst time, along with the smallest
          memory processes to be executed before the larger burst times and larger memory requirements would be executed.
          
        Scenario 3:
          Each processor has the same memory capacity.
          P1 and P2 are 2GHz.
          P3 is 3 Ghz.
          P4 is 4Ghz.
          
          This would be a similar scenario to scenario 1, since we don't need to worry about our processors running out of memory,
          and we would want our slowest processor to execute the smallest task, the order would go as stated below:
          
         The first process to be scheduled would be P2, and it would run until completion.
         The second process to be scheduled would be P4, and it would also run until completion.
         The third process to be scheduled would be P1, and it would run until completion.
         The fourth process to be scheduled would be P3, and it would run until completion.
          
  Scenario 4:
  
      Process:            Arrival Time:               Service Time:             Memory Requirements:    
       P1                     6                          8                           4GB                  
       P2                     3                          4                           2GB                  
       P3                     2                          9                           5GB                  
       P4                     4                          5                           3GB     
       
       Scenario 4 is different because each process will have a different arrival time. 
       Each processor will have the same speed and same memory capacity.
       The algorithm will look like this:
       
       P3 will be scheduled and exectued at time 2.
       P3 will be executed until completion, since we are not stopping once a process has been chosen.
       Once P3 has been executed, P1, P2, and P4 will be ready to schedule at time = 9.
       P2 will be scheduled next, since it has the shortest service time and it will run until completion.
       At time = 13, P1 and P4 still need to be scheduled.
       P4 will be scheduled next, since it has the shortest service time between P1 and P4 and will run until completion.
       P1 will be scheduled and executed last, at time = 18.
 
Justification:
 We decided to use the shortest job first scheduling algorithm because this is the algorithm that will find the process with the shortest
burst time and execute it, theoretically leading to a short wait time for all 40 processes. We are wary about this algorithm, but would like
to test how efficient it actually is. This is our first pick, because turnaround time, and average system turnaround time is dependent on wait time,
so if wait time is the smallest it can be, does that mean the turnaround time will be relatively small? In scenarios 1-3, the scheduler will be able to
pick the shortest process of the 40 processes. We are hopeful that this will make for a quick waitime and an efficient turnaround time. Of course, 
this algorithm has drawbacks, which is the lack of account for processor speed and processor memory capacity. This could be a problem and could 
cause the average turnaround time and the wait time for each process to take longer than expected. We are thinking about working around this 
by creating priority's within the algorithm. 
